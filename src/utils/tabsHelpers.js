/**
 * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Ç–∞–±—É
 * @param {string} prefix - –ø—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è ID
 * @returns {string} - —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
 */
export const generateTabId = (prefix = "tab") => {
  return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
};

/**
 * –í–∞–ª—ñ–¥—É—î –æ–±'—î–∫—Ç —Ç–∞–±—É
 * @param {Object} tab - –æ–±'—î–∫—Ç —Ç–∞–±—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 * @returns {boolean} - true —è–∫—â–æ —Ç–∞–± –≤–∞–ª—ñ–¥–Ω–∏–π
 */
export const validateTab = (tab) => {
  if (!tab || typeof tab !== "object") {
    return false;
  }

  const requiredFields = ["id", "title", "url"];
  return requiredFields.every(
    (field) =>
      tab.hasOwnProperty(field) &&
      typeof tab[field] === "string" &&
      tab[field].trim() !== ""
  );
};

/**
 * –°–æ—Ä—Ç—É—î —Ç–∞–±–∏: —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ, –ø–æ—Ç—ñ–º –Ω–µ–∑–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ
 * @param {Array} tabs - –º–∞—Å–∏–≤ —Ç–∞–±—ñ–≤
 * @returns {Array} - –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ —Ç–∞–±—ñ–≤
 */
export const sortTabs = (tabs) => {
  const pinnedTabs = tabs.filter((tab) => tab.isPinned);
  const unpinnedTabs = tabs.filter((tab) => !tab.isPinned);
  return [...pinnedTabs, ...unpinnedTabs];
};

/**
 * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–± –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ
 * @param {Array} tabs - –º–∞—Å–∏–≤ —Ç–∞–±—ñ–≤
 * @param {string} closedTabId - ID –∑–∞–∫—Ä–∏—Ç–æ–≥–æ —Ç–∞–±—É
 * @param {number} closedTabIndex - —ñ–Ω–¥–µ–∫—Å –∑–∞–∫—Ä–∏—Ç–æ–≥–æ —Ç–∞–±—É
 * @returns {Object|null} - –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–± –∞–±–æ null
 */
export const findNextActiveTab = (tabs, closedTabId, closedTabIndex) => {
  const remainingTabs = tabs.filter((tab) => tab.id !== closedTabId);

  if (remainingTabs.length === 0) {
    return null;
  }

  // –Ø–∫—â–æ –∑–∞–∫—Ä–∏—Ç–∏–π —Ç–∞–± –Ω–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–º, –±–µ—Ä–µ–º–æ —Ç–∞–± –Ω–∞ —Ç—ñ–π –∂–µ –ø–æ–∑–∏—Ü—ñ—ó
  if (closedTabIndex < remainingTabs.length) {
    return remainingTabs[closedTabIndex];
  }

  // –Ü–Ω–∞–∫—à–µ –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∞–±
  return remainingTabs[remainingTabs.length - 1];
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–Ω–∞ –∑–∞–∫—Ä–∏—Ç–∏ —Ç–∞–±
 * @param {Object} tab - –æ–±'—î–∫—Ç —Ç–∞–±—É
 * @param {Array} allTabs - –≤—Å—ñ —Ç–∞–±–∏
 * @returns {boolean} - true —è–∫—â–æ —Ç–∞–± –º–æ–∂–Ω–∞ –∑–∞–∫—Ä–∏—Ç–∏
 */
export const canCloseTab = (tab, allTabs) => {
  // –ú–æ–∂–Ω–∞ –∑–∞–∫—Ä–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–∞–±, —è–∫—â–æ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ö–æ—á–∞ –± –æ–¥–∏–Ω
  return allTabs.length > 1;
};

/**
 * –û–±—á–∏—Å–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–∞–±—É –ø—Ä–∏ drag and drop
 * @param {number} mouseX - –ø–æ–∑–∏—Ü—ñ—è –º–∏—à—ñ –ø–æ X
 * @param {HTMLElement} container - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±—ñ–≤
 * @param {number} tabWidth - —à–∏—Ä–∏–Ω–∞ —Ç–∞–±—É
 * @returns {number} - —ñ–Ω–¥–µ–∫—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
 */
export const calculateDropPosition = (mouseX, container, tabWidth) => {
  const containerRect = container.getBoundingClientRect();
  const relativeX = mouseX - containerRect.left;
  return Math.floor(relativeX / tabWidth);
};

/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ç–∞–± –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
 * @param {Object} tabData - –¥–∞–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∞–±—É
 * @returns {Object} - –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç —Ç–∞–±—É
 */
export const createNewTab = (tabData) => {
  return {
    id: generateTabId(),
    title: tabData.title || "–ù–æ–≤–∏–π —Ç–∞–±",
    url: tabData.url || "/",
    isPinned: tabData.isPinned || false,
    icon: tabData.icon || "üìÑ",
    ...tabData,
  };
};

/**
 * –û–±—Ä—ñ–∑–∞—î –Ω–∞–∑–≤—É —Ç–∞–±—É –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
 * @param {string} title - –Ω–∞–∑–≤–∞ —Ç–∞–±—É
 * @param {number} maxLength - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
 * @returns {string} - –æ–±—Ä—ñ–∑–∞–Ω–∞ –Ω–∞–∑–≤–∞
 */
export const truncateTabTitle = (title, maxLength = 20) => {
  if (title.length <= maxLength) {
    return title;
  }
  return title.substring(0, maxLength - 3) + "...";
};
